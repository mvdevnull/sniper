Issues/Bugs/Enhancements Section:
---------
sniper.sh
---------
Issue/Bugs
1)some nmap initial IP's to scan dont' work. why didn't this work 10.241.53.194, 10.241.53.191, 10.240.57.20, 10.240.57.23, 10.242.80.15, 10.242.80.18, 10.243.53.194, 10.243.53.192  ?   compare nmap   vs db_nmap   vs within sniper.sh see diff.
2)nmap rules need to be formated more like eyewitness rules and columns.   (example: need purpose on nmap,etc)
3)I have 3 printer (sharp,lexmark,zebra) default password checkers.. they are similiar, but need to be combined and brought into sniper somehow.   after we get a cred, we don't want to test it again.  we also want to keep it somewhere. maybe in creds-- creds add user:admin password:1234 address:1.1.1.1 port:80 protocol:?dontknow?

1.2)fix sniper_id.py  (python2 -> python3)
2)sniper.sh --reinit needs to check if msfconsole is running.  if it is, do not --reinit and instruct user to close msfconsole before --reinit
3)db_import *.nessus will reset some hostnames incorrectly.    Would have to "strip" some of the terrible host discovery from XML .nessus to do anything.
    Close try below (but no cigar) to remove OS guess from .nessus file - need to look at this in detail
    awk '/<plugin_output>/ && /Following OS Fingerprints/ {f=0} /<\/plugin_output>/{f=1} f' test.nessus > testnew.nessus
    [-] Failed to import /usr/local/src/github/sniper/nessus/new/testnew.nessus: Could not automatically determine file type

Speed Ideas to consider:
1) nmap -sV is slowest needs to thread or run mult hosts at a time.   (bc we are breaking down by 1 host and 1 port. we need this b/c timeouts give no information when only 1 port fails) (confirmed db_nmap and nmap -sV same speed)  
    (there may be a way to do this with bash to multi-thread, but it's messy) (might be better to wait for bash->python changeover)

Coding Neatness to consider:
1)use functions and classes and get rid of the duplicative coding
2)sometype of debug mode -v -vv
3)convert all python.sh  to python.py


Enhancements to consider:
1)other msf aux modules to do all time -  example -- use auxiliary/scanner/ftp/anonymous on all FTP (msf>snmp public or >smtpenum or >dns zonexfer)  (there may be some aux modules for misc OS/appliance? might look for ruby code with updates to database and work that way?)
2)Early dependency checking (check for python library, msfconsole, etc)


GAPING HOLES found by msf compatable nessus plugins (BROKEN now)
This code and ideas are in the MAGIC CVE section of sniper.sh and within cve_update in sniper.py


=========================

----------------
sniper.py
--------------
OS Detection:
1)Expand os_rules.csv with more  service ways to detect OS.
2)Expand eyewitness_rules.csv with more service ways to detect OS.

LOGIC BUG:

(-) report findings section
=detect 3.2.1.42 GEN001120 - FAIL rshd.config
=detect 3.2.1.38 GEN001020 - FAIL & root <> console
=plugin 38153, good summary of missing patches(but has to use nessucmd cuz msf db_import doesn't capture)
=how to check last bigfix update done ? 1)NASL like EPO?  2)nessucmd- policy like custom wireshark -> get file -> etc
=maybe id=35730 not ilke %virtual% -- helps find USB devices which could show up as unapproved USB devices?

(-) Confirm credential issues
(need to test all combinations and list definitively)
=good vs not good ssh - if 11936 and method = ssh, then good  (note 21745 is false positive)
=plugin 21745 - cred problem - (works win2k8R2 (UAC enabled) what does it do in linux ssh
=plugin 24786 - you logged in, but without administrator priv's
=???X)possibly something to be smarter about credential issues - there are many different ways for nessus to have cred issues 

-----


#Future Tools (not needed yet, but maybe at some point)
#Third-Party Tools (supplied within the sniper ./third-party-tools directory , but may want to update as needed)
smbshell.nbin 			-----> (nessus tool)
nessrest			-----> pip install nessrest
nessus ----> https://www.tenable.com/downloads/nessus 


---------
Future (Low Priority - if any)
---------
X)Do some logic for Account Credential issues
=1)See parse_nessus_xml.v19.pl  (specifically in section where it lists accounts)
=2)NSS-10860 will get local accounts
=3)NSS-10399 will get domain accounts (may need to change nessus scan policy with ENDUID > 1200)

X)msf cred database functionality
(need to think about the security aspect - storing password for assessment in clear text..? 
run a "cred -a command to add any *VALID* creds recieved from ssh login,etc"  
maybe cred -a [IPaddress] -t password -p 22 -u [user] -P [pass]  

