Issues/Bugs/Enhancements Section:
---------
sniper.sh
---------
Issue/Bugs
1)fix sniper_id.py  (python2 -> python3)
2)sometimes we get this error:  (how to reproduce?)
    RHOSTS => file:/tmp/msf-db-rhosts-20250805-2426494-e3huex
    msf6 auxiliary(scanner/smb/smb_version) > run
    [-] Msf::OptionValidateError The following options failed to validate:
    [-] Invalid option RHOSTS: Unexpected values: file:/tmp/msf-db-rhosts-20250805-2426494-e3huex 
3)Nessus db_import will reset some hostnames incorrectly.    Would have to "strip" some of the terrible host discovery from XML .nessus to do anything. Not alot you can do about it if you want the nessus data.
    Close try (but no cigar) to remove OS guess from .nessus file - need to look at this in detail
    awk '/<plugin_output>/ && /Following OS Fingerprints/ {f=0} /<\/plugin_output>/{f=1} f' test.nessus > testnew.nessus
    [-] Failed to import /usr/local/src/github/sniper/nessus/new/testnew.nessus: Could not automatically determine file type


Speed Ideas to consider:
1) nmap -sV is slowest needs to thread or run mult hosts at a time.   (bc we are breaking down by 1 host and 1 port. we need this b/c timeouts give no information when only 1 port fails) (confirmed db_nmap and nmap -sV same speed)  
    (there may be a way to do this with bash to multi-thread, but it's messy) (might be better to wait for bash->python changeover)

Coding Neatness to consider:
1)the OS detection in sniper.py needs simplifing
1)use functions and classes and get rid of the duplicative coding
2)sometype of debug mode -v -vv
3)convert all python.sh  to python.py


Enhancements to consider:
1)remove local eth0/eth1 ip address from msfdatabase results (this could be trouble if dealing with dockers and alot of interfaces)
2)other msf aux modules to do all time -  example -- use auxiliary/scanner/ftp/anonymous on all FTP (msf>snmp public or >smtpenum or >dns zonexfer)  (there may be some aux modules for misc OS/appliance? might look for ruby code with updates to database and work that way?)
3)Early dependency checking (check for python library, msfconsole, etc)
4)msf cred database functionality
(need to think about the security aspect - storing password for assessment in clear text..? 
run a "cred -a command to add any *VALID* creds recieved from ssh login,etc"  
maybe cred -a [IPaddress] -t password -p 22 -u [user] -P [pass]  


Nessus Integration (BROKEN now)
= after kicking off the nessus scan --> import the nessus scans ...
(see sniper.sh  and ./tools/sniper.rb) 
msfconsole> load sniper
---??nessus_report_list (periodically make sure nothing running)
nessus_report_get 897ad439-1113-6af6-d701-c50dd2849d8fdcd56a59bef6527f

GAPING HOLES found by msf compatable nessus plugins (BROKEN now)
This code and ideas are in the MAGIC CVE section of sniper.sh and within cve_update in sniper.py


=========================

----------------
sniper.py
--------------
OS Detection:
1)Needs a cleaner way to identify/update HostOS updates.  Also, how do we handle if Nessus inaccuratley updates HostOS?  

LOGIC BUG:
1)UNIX is commented out but would need to do it later on at end (if at all!!).

(-) report findings section
=detect 3.2.1.42 GEN001120 - FAIL rshd.config
=detect 3.2.1.38 GEN001020 - FAIL & root <> console
=plugin 38153, good summary of missing patches(but has to use nessucmd cuz msf db_import doesn't capture)
=how to check last bigfix update done ? 1)NASL like EPO?  2)nessucmd- policy like custom wireshark -> get file -> etc
=maybe id=35730 not ilke %virtual% -- helps find USB devices which could show up as unapproved USB devices?

(-) Confirm credential issues
(need to test all combinations and list definitively)
=good vs not good ssh - if 11936 and method = ssh, then good  (note 21745 is false positive)
=plugin 21745 - cred problem - (works win2k8R2 (UAC enabled) what does it do in linux ssh
=plugin 24786 - you logged in, but without administrator priv's
=???X)possibly something to be smarter about credential issues - there are many different ways for nessus to have cred issues 

-----


#Future Tools (not needed yet, but maybe at some point)
#Third-Party Tools (supplied within the sniper ./third-party-tools directory , but may want to update as needed)
auto_exploit-darkoperator	-----> git clone https://github.com/darkoperator/Metasploit-Plugins.git 
smbshell.nbin 			-----> (nessus tool)
nessrest			-----> pip install nessrest
nessus ----> https://www.tenable.com/downloads/nessus 


---------
Future (Low Priority - if any)
---------
Do some logic for Account Credential issues
=1)See parse_nessus_xml.v19.pl  (specifically in section where it lists accounts)
=2)NSS-10860 will get local accounts
=3)NSS-10399 will get domain accounts (may need to change nessus scan policy with ENDUID > 1200)


